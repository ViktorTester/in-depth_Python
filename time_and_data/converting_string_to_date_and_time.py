                                        # Самостоятельное преобразование данных


from datetime import date, time

day, month, year = input('Введите дату в формате ДД.ММ.ГГГГ').split('.')
hour, minute, second = input('Введите время в формате ЧЧ:ММ:СС').split(':')

my_date = date(int(year), int(month), int(day))        # создаем объект типа date
my_time = time(int(hour), int(minute), int(second))    # создаем объект типа time

print(my_date)  # 2021-11-13
print(my_time)  # 21:34:59

# То есть изначально мы предполагаем, что введенные дата и время имеют определенный
# формат. Используя строковый метод split(), мы разделяем дату через точку
# (можно было выбрать любой другой разделитель), а время — через двоеточие (:).
# После этого мы создаем дату/время из полученных данных.

# Если пользователь введет данные в неправильном формате, то мы можем получить
# самые разные ошибки (исключения) — от ValueError до IndexError. К тому же,
# если мы вдруг решим изменить формат входных данных, нам придется существенно
# переписать код для преобразования строки в дату/время.

# Рассмотрим ситуацию, когда пользователь вводит некорректную дату именно с точки
# зрения календаря. Если попытаться ввести дату
# 31 февраля (31.02.2021), то мы получим ошибку (исключение) ValueError:
# ValueError: day is out of range for month

# Для того чтобы поймать и обработать исключение, в Python используется конструкция
# try-except (о которой будет рассказано в данном курсе).
# Код, который потенциально может сгенерировать ошибку (исключение),
# помещается в блок try, и ошибки (исключения) перехватываются в блоке except.

from datetime import date, time

try:
    day, month, year = input('Введите дату в формате ДД.ММ.ГГГГ').split('.')
    my_date = date(int(year), int(month), int(day))
    print(my_date)
except ValueError:
    print('Ошибка ввода')
# Если теперь попытаться ввести дату 31 февраля (31.02.2021),
# то при создании объекта date возникнет ошибка (исключение), которая
# будет перехвачена в блоке except.

# Обратите внимание на то, что текст Ошибка ввода будет выводиться в двух случаях:
# 1) пользователь вместо чисел введет что-то другое, тогда функция int() не сможет
# преобразовать строку в число и возникнет ошибка (исключение) ValueError

# 2) пользователь введет числа, но они не составляют корректную дату или время


                                        # Читаем данные, пока не ввели корректную дату (время)


# Конструкцию try-except можно завернуть в цикл, чтобы читать данные до
# тех пор, пока не ввели корректную дату (время).

# Приведенный ниже код читает данные до тех пор, пока пользователь
# не введет корректную дату в нужном формате:

from datetime import date, time

while True:
    try:
        day, month, year = input('Введите дату в формате ДД.ММ.ГГГГ').split('.')

        my_date = date(int(year), int(month), int(day))

        print('Введена корректная дата:', my_date)
        break
    except ValueError:    # перехватываем ошибку типа ValueError
        print('Введенная дата не является корректной, попробуйте еще раз')

# Обратите внимание на то, что указанный выше код устойчив лишь к ошибкам
# (исключениям) типа ValueError. Чтобы обработчик перехватывал любую ошибку
# (исключение), нужно опустить слово ValueError:
from datetime import date, time

while True:
    try:
        day, month, year = input('Введите дату в формате ДД.ММ.ГГГГ').split('.')

        my_date = date(int(year), int(month), int(day))

        print('Введена корректная дата:', my_date)
        break
    except:      # перехватываем любую ошибку
        print('Введенная дата не является корректной, попробуйте еще раз')


                                        # Преобразование строки в дату с помощью метода fromisoformat()


# Самостоятельное преобразование данных из строки в объекты типа
# date и time оказывается довольно неудобным. Код
# получается достаточно громоздким и плохо расширяемым.

# Для того чтобы преобразовать строку из ISO формата в объект даты
# (date), можно использовать метод fromisoformat().
from datetime import date

my_date = date.fromisoformat('2020-01-31')

print(my_date)  # 2020-01-31
print(type(my_date))  # <class 'datetime.date'>

# Метод fromisoformat() полезен на практике, однако у него есть серьезное
# ограничение: он работает только для дат записанных в ISO формате.

# Метод fromisoformat() был добавлен только в Python 3.7. Ранее он недоступен.